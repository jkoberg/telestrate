// Generated by CoffeeScript 1.8.0
(function() {
  define(['simplify_polyline', 'binary_search'], function(simplify_polyline, binary_search) {
    var PaintInputRecorder, PaintMark, PaintSession, active_stroke, background_stroke, basic_stroke, epoch_score_func, fake_mouse_event, foreground_stroke, slim_event;
    basic_stroke = {
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      opacity: 1.0
    };
    background_stroke = jQuery.extend({}, basic_stroke, {
      'stroke-width': 9,
      'stroke': 'black'
    });
    foreground_stroke = jQuery.extend({}, basic_stroke, {
      'stroke-width': 5,
      'stroke': 'white'
    });
    active_stroke = jQuery.extend({}, foreground_stroke, {
      'stroke': 'orange'
    });
    fake_mouse_event = function(touchevent) {
      return {
        timeStamp: touchevent.timeStamp,
        pageX: touchevent.touches[0].pageX,
        pageY: touchevent.touches[0].pageY,
        originalEvent: touchevent
      };
    };
    slim_event = function(evt, epoch) {
      return {
        timeStamp: evt.timeStamp - epoch,
        pageX: evt.pageX,
        pageY: evt.pageY
      };
    };
    epoch_score_func = function(item) {
      return item.epoch;
    };
    return {
      PaintSession: PaintSession = (function() {
        function PaintSession(paper, postpathfunc) {
          this.paper = paper;
          this.postpathfunc = postpathfunc;
          this.paintmarks = new binary_search.OrderedArray(epoch_score_func);
          this.current_mark = void 0;
          this.frame = void 0;
        }

        PaintSession.prototype.clear = function() {
          this.paintmarks.forEach(function(mark) {
            return mark.removePath();
          });
          return null;
        };

        PaintSession.prototype.drag_start = function(evt) {
          var p;
          p = new PaintMark(evt.timeStamp);
          this.paintmarks.push(p);
          p.addEvent(evt);
          p.createPath(this.paper);
          if (this.postpathfunc != null) {
            this.postpathfunc();
          }
          p.updatePath(-Infinity, Infinity);
          p.setAttr(active_stroke);
          return this.current_mark = p;
        };

        PaintSession.prototype.drag_move = function(evt) {
          if (this.current_mark != null) {
            this.current_mark.addEvent(evt);
            return this.current_mark.updatePath(-Infinity, Infinity);
          }
        };

        PaintSession.prototype.drag_end = function(evt) {
          if (this.current_mark != null) {
            this.current_mark.setAttr(foreground_stroke);
            return this.current_matk = void 0;
          }
        };

        return PaintSession;

      })(),
      PaintInputRecorder: PaintInputRecorder = (function() {
        function PaintInputRecorder(paper, videodom, tsrecord) {
          this.paper = paper;
          this.frame = void 0;
          this.raf = void 0;
          this.videodom = videodom;
          this.tsrecord = tsrecord;
          this.setup_frame();
          this.started = false;
        }

        PaintInputRecorder.prototype.emit = function(action, params) {
          return this.tsrecord.add_event(action, params);
        };

        PaintInputRecorder.prototype.toFront = function() {
          return this.frame.toFront();
        };

        PaintInputRecorder.prototype.setup_frame = function() {
          this.frame = this.paper.rect(0, 0, this.paper.width, this.paper.height);
          this.frame.attr('fill', 'red');
          this.frame.attr('opacity', 0.0);
          console.log("made frame", this.frame);
          this.touches = {};
          this.frame.mousedown((function(_this) {
            return function(e) {
              return _this.drag_start(e, 'mouse0');
            };
          })(this));
          this.frame.mousemove((function(_this) {
            return function(e) {
              return _this.drag_move(e, 'mouse0');
            };
          })(this));
          this.frame.mouseover((function(_this) {
            return function(e) {
              return _this.drag_move(e, 'mouse0');
            };
          })(this));
          this.frame.mouseup((function(_this) {
            return function(e) {
              return _this.drag_end(e, 'mouse0');
            };
          })(this));
          this.frame.touchstart((function(_this) {
            return function(te) {
              var touch, _i, _len, _ref;
              _ref = te.changedTouches;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                touch = _ref[_i];
                _this.touches[touch.identifier] = te.timeStamp;
              }
              return null;
            };
          })(this));
          this.frame.touchend((function(_this) {
            return function(te) {
              return _this.drag_end(fake_mouse_event(te));
            };
          })(this));
          return this.frame.touchmove((function(_this) {
            return function(te) {
              var syn_evt, touch, _i, _len, _ref, _results;
              syn_evt = $.extend({
                timeStamp: te.timeStamp
              }, touch);
              _ref = te.changedTouches;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                touch = _ref[_i];
                _results.push(_this.drag_move(syn_evt, touch.identifier));
              }
              return _results;
            };
          })(this));
        };

        PaintInputRecorder.prototype.drag_start = function(evt, id) {
          var video_starttime;
          video_starttime = this.videodom.currentTime;
          this.drag_epoch = evt.timeStamp;
          this.started = true;
          return this.emit('DRAG_START', {
            id: [id, this.drag_epoch],
            video_starttime: video_starttime,
            drag_epoch: this.drag_epoch,
            evt: slim_event(evt, this.drag_epoch)
          });
        };

        PaintInputRecorder.prototype.drag_move = function(evt, id) {
          if (this.started) {
            if (evt.which === 0) {
              return this.drag_end(evt);
            } else {
              return this.emit('DRAG_DATA', {
                id: [id, this.drag_epoch],
                evt: slim_event(evt, this.drag_epoch)
              });
            }
          }
        };

        PaintInputRecorder.prototype.drag_end = function(evt, id) {
          var video_endtime;
          if (this.started) {
            video_endtime = this.videodom.currentTime;
            this.emit('DRAG_END', {
              id: [id, this.drag_epoch],
              video_endtime: video_endtime,
              evt: slim_event(evt, this.drag_epoch)
            });
            return this.started = false;
          }
        };

        return PaintInputRecorder;

      })(),
      PaintMark: PaintMark = (function() {
        function PaintMark(epoch) {
          this.epoch = epoch;
          this.init();
        }

        PaintMark.prototype.path_attr = foreground_stroke;

        PaintMark.prototype.shadow_attr = background_stroke;

        PaintMark.prototype.init = function() {
          this.events = new binary_search.OrderedArray(function(i) {
            return i[0];
          });
          this.path = void 0;
          return this.shadowpath = void 0;
        };

        PaintMark.prototype.addEvent = function(evt) {
          this.events.push([evt.timeStamp - this.epoch, evt.pageX, evt.pageY]);
          return this;
        };

        PaintMark.prototype.first_time = function() {
          return this.events.firstkey();
        };

        PaintMark.prototype.last_time = function() {
          return this.events.lastkey();
        };

        PaintMark.prototype.generatePath = function(start_t, end_t, penwidth, smoothing) {
          var event, events, n, _i, _len, _results;
          events = this.events.slice_key(start_t, end_t);
          if (penwidth == null) {
            penwidth = 1;
          }
          events = simplify_polyline.poly_simplify_2d(penwidth, events);
          if (smoothing > 0) {
            return simplify_polyline.simple_spline_interpolation(events, 0, smoothing);
          }
          _results = [];
          for (n = _i = 0, _len = events.length; _i < _len; n = ++_i) {
            event = events[n];
            _results.push([(n === 0 ? 'M' : 'L'), event[1], event[2]]);
          }
          return _results;
        };

        PaintMark.prototype.createPath = function(paper) {
          this.shadowpath = paper.path();
          this.shadowpath.attr(this.shadow_attr);
          this.path = paper.path();
          this.path.attr(this.path_attr);
          return this;
        };

        PaintMark.prototype.setAttr = function(attr) {
          this.path.attr(attr);
          return this;
        };

        PaintMark.prototype.updatePath = function(start_t, end_t) {
          var ptxt;
          ptxt = this.generatePath(start_t, end_t, 0.0, 0.0);
          this.path.attr('path', ptxt);
          this.shadowpath.attr('path', ptxt);
          return this;
        };

        PaintMark.prototype.removePath = function() {
          if (this.path != null) {
            this.path.remove();
            this.shadowpath.remove();
            this.path = void 0;
            this.shadowpath = void 0;
            return this;
          }
        };

        return PaintMark;

      })()
    };
  });

}).call(this);
