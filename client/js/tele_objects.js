// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['tstamp', 'event_engine', 'js/uuid.js'], function() {
    var TelestrationControls, TelestrationSessionPlayer, TelestrationSessionRecord, event_engine, other_modules, tstamp;
    tstamp = arguments[0], event_engine = arguments[1], other_modules = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return {
      TelestrationSessionRecord: TelestrationSessionRecord = (function() {
        function TelestrationSessionRecord() {
          this.notify = __bind(this.notify, this);
          this.listeners = [];
          this.uuid = uuid.v1();
          this.creation_time = tstamp();
          this.video = void 0;
          this.playstate = void 0;
          this.played = [];
          this.unplayed = [];
          this.time_ref = 0;
        }

        TelestrationSessionRecord.prototype.format_version = '0x00011000';

        TelestrationSessionRecord.prototype.register_listener = function(callback) {
          return this.listeners.push(callback);
        };

        TelestrationSessionRecord.prototype.rawdump = function() {
          var all, count, itemcount, lastts;
          itemcount = 0;
          lastts = 0;
          all = this.played.concat(this.unplayed);
          count = all.length;
          lastts = count ? all[count - 1].ts : this.creation_time;
          return {
            uuid: this.uuid,
            creation_time: this.creation_time,
            creation_time_iso: new Date(this.creation_time),
            format_version: this.format_version,
            events: all.concat({
              action: 'SCRIPT_END',
              ts: lastts,
              params: {
                itemcount: count
              }
            })
          };
        };

        TelestrationSessionRecord.prototype.dump = function() {
          throw {
            name: 'Unimplemented'
          };
        };

        TelestrationSessionRecord.prototype.load = function(json) {
          return this.load_raw(JSON.parse(json));
        };

        TelestrationSessionRecord.prototype.load_raw = function(obj) {
          this.uuid = obj.uuid;
          this.creation_time = obj.creation_time;
          return this.unplayed = obj.events;
        };

        TelestrationSessionRecord.prototype.get_time = function() {
          return tstamp() - this.time_ref;
        };

        TelestrationSessionRecord.prototype.playone = function(playfunc) {
          var item;
          item = this.unplayed.shift();
          playfunc(item);
          return this.played.push(item);
        };

        TelestrationSessionRecord.prototype.unplayone = function(unplayfunc) {
          var item;
          item = this.played.pop();
          playfunc(item);
          return this.unplayed.unshift(item);
        };

        TelestrationSessionRecord.prototype.playthem = function(playfunc) {
          var _results;
          _results = [];
          while (this.unplayed.length > 0) {
            _results.push(this.playone(playfunc));
          }
          return _results;
        };

        TelestrationSessionRecord.prototype.rewind = function() {
          return this.unplayed = this.played.concat(this.unplayed);
        };

        TelestrationSessionRecord.prototype.notify = function(newdata) {
          var listener_callback, _i, _len, _ref, _results;
          _ref = this.listeners;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            listener_callback = _ref[_i];
            _results.push(listener_callback(this, newdata));
          }
          return _results;
        };

        TelestrationSessionRecord.prototype.add_event = function(action, params) {
          var evt, now;
          now = this.get_time() - this.creation_time;
          evt = {
            ts: now,
            action: action,
            params: params
          };
          this.unplayed.push(evt);
          return this.notify(evt);
        };

        return TelestrationSessionRecord;

      })(),
      TelestrationSessionPlayer: TelestrationSessionPlayer = (function() {
        function TelestrationSessionPlayer(script, videodom, paintsession) {
          this.tick = __bind(this.tick, this);
          this.script = script;
          this.script.register_listener((function(_this) {
            return function(script, newdata) {
              return _this.tick();
            };
          })(this));
          this.videodom = videodom;
          this.videos = {};
          this.paintsession = paintsession;
          this.dispatcher = new event_engine.EventEngine(tstamp);
          this.videotstamp = (function(_this) {
            return function() {
              return _this.videodom.currentTime;
            };
          })(this);
          this.video_dispatcher = new event_engine.EventEngine(this.videotstamp);
          this.last_idx = 0;
          this.last_tick_ts = 0;
          this.playback_epoch = tstamp();
          this.tick();
        }

        TelestrationSessionPlayer.prototype.tick = function(evt) {
          var idx, now;
          idx = 0;
          setTimeout(this.tick, 16);
          if ((evt != null) && (evt.ts != null)) {
            now = evt.ts;
          } else {
            now = this.dispatcher.timesource();
          }
          this.script.playthem((function(_this) {
            return function(item) {
              return _this.dispatcher.queueWithEpoch(item.ts, 0, _this.playback_epoch, (function() {
                return _this.call_method(item);
              }), {
                note: item.action
              });
            };
          })(this));
          this.dispatcher.tick(now);
          return this.last_tick_ts = now;
        };

        TelestrationSessionPlayer.prototype.START_SESSION = function(params) {
          return this.start_timestamp = tstamp();
        };

        TelestrationSessionPlayer.prototype.SCRIPT_END = function(params) {
          return alert("Telescript has ended");
        };

        TelestrationSessionPlayer.prototype.LOAD_VIDEO = function(params) {
          this.videos[params.url] = {
            load_epoch: tstamp(),
            dispatcher: new event_engine.EventEngine(this.videotstamp)
          };
          vid.src = params.url;
          vid.currentTime = 0;
          vid.playbackRate = 0;
          vid.volume = 1.0;
          return this.videos[params.url].dispatcher.start();
        };

        TelestrationSessionPlayer.prototype.SEEK_VIDEO = function(params) {
          return this.videodom.currentTime = params.vidtime;
        };

        TelestrationSessionPlayer.prototype.PAUSE_VIDEO = function(params) {
          this.videodom.pause();
          return this.videodom.currentTime = params.vidtime;
        };

        TelestrationSessionPlayer.prototype.PLAY_VIDEO = function(params) {
          this.videodom.currentTime = params.vidtime;
          return this.videodom.play();
        };

        TelestrationSessionPlayer.prototype.PLAYRATE = function(params) {
          return this.videodom.playbackRate = params.rate;
        };

        TelestrationSessionPlayer.prototype.START_TIMING = function(params) {
          var entry, _i, _len, _ref;
          _ref = this.script;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            entry = _ref[_i];
            if (entry.action === 'LOAD_VIDEO') {
              this.calll_method(entry);
            }
          }
          return this.dispatcher.start();
        };

        TelestrationSessionPlayer.prototype.HOLD_TIMING = function(params) {
          this.videodom.pause();
          return this.dispatcher.pause();
        };

        TelestrationSessionPlayer.prototype.DRAG_START = function(params) {
          return this.paintsession.drag_start(params.evt);
        };

        TelestrationSessionPlayer.prototype.DRAG_END = function(params) {
          return this.paintsession.drag_end(params.evt);
        };

        TelestrationSessionPlayer.prototype.DRAG_DATA = function(params) {
          return this.paintsession.drag_move(params.evt);
        };

        TelestrationSessionPlayer.prototype.DRAG_REMOVE = function(params) {};

        TelestrationSessionPlayer.prototype.CLEARPATHS = function(params) {
          return this.paintsession.clear();
        };

        TelestrationSessionPlayer.prototype.call_method = function(e) {
          var method;
          method = this[e.action];
          if (method != null) {
            return method.call(this, e.params);
          } else {
            console.log("**** No player method " + e.action);
            return null;
          }
        };

        return TelestrationSessionPlayer;

      })(),
      TelestrationSessionControls: TelestrationControls = (function() {
        function TelestrationControls(tsrecord, videodom, serversocket) {
          this.clearframe = __bind(this.clearframe, this);
          this.loadvideo = __bind(this.loadvideo, this);
          this.normalspeed = __bind(this.normalspeed, this);
          this.slomo = __bind(this.slomo, this);
          this.instantreplay = __bind(this.instantreplay, this);
          this.rewind = __bind(this.rewind, this);
          this.pause = __bind(this.pause, this);
          this.playpause = __bind(this.playpause, this);
          this.reset = __bind(this.reset, this);
          this.tsrecord = tsrecord;
          this.videodom = videodom;
          this.server_socket = serversocket;
          this.setup_buttons();
        }

        TelestrationControls.prototype.emit = function(action, params) {
          return this.tsrecord.add_event(action, params);
        };

        TelestrationControls.prototype.reset = function(evt) {
          this.emit('PAUSE_VIDEO', {
            vidtime: 0
          });
          return this.emit('CLEARPATHS', {});
        };

        TelestrationControls.prototype.playpause = function(evt) {
          if (this.videodom.paused) {
            this.emit('PLAY_VIDEO', {
              vidtime: this.videodom.currentTime
            });
            return this.emit('CLEARPATHS', {});
          } else {
            return this.emit('PAUSE_VIDEO', {
              vidtime: this.videodom.currentTime
            });
          }
        };

        TelestrationControls.prototype.pause = function(evt) {
          return this.emit('PAUSE_VIDEO', {
            vidtime: this.videodom.currentTime
          });
        };

        TelestrationControls.prototype.rewind = function(evt) {
          return this.emit('PAUSE_VIDEO', {
            vidtime: 0
          });
        };

        TelestrationControls.prototype.instantreplay = function(evt) {
          this.emit('PLAYRATE', {
            rate: 0.5
          });
          return this.emit('SEEK_VIDEO', {
            vidtime: this.videodom.currentTime - 5
          });
        };

        TelestrationControls.prototype.slomo = function(evt) {
          return this.emit('PLAYRATE', {
            rate: 0.25
          });
        };

        TelestrationControls.prototype.normalspeed = function(evt) {
          return this.emit('PLAYRATE', {
            rate: 1.0
          });
        };

        TelestrationControls.prototype.loadvideo = function(evt, url) {
          return this.emit('LOAD_VIDEO', {
            url: url
          });
        };

        TelestrationControls.prototype.clearframe = function(evt) {
          return this.emit('CLEARPATHS', {});
        };

        TelestrationControls.prototype.setup_buttons = function() {
          var buttonstate;
          buttonstate = {};
          $('#reset_btn').on('click', this.reset);
          $('#play_btn').on('click', this.playpause);
          $('#pause_btn').on('click', this.pause);
          $('#rewind_btn').on('click', this.rewind);
          $('#jump_btn').on('click', this.instantreplay);
          $('#slomo_btn').on('click', this.slomo);
          $('#normalspeed_btn').on('click', this.normalspeed);
          $('#clear_frame_btn').on('click', this.clearframe);
          this.server_socket.removeAllListeners('save_success');
          this.server_socket.on('save_success', function(msg) {
            return console.log("Successfully saved uuid:" + msg.uuid + " id:" + msg.id);
          });
          $('#save_sess_btn').on('click', (function(_this) {
            return function(evt) {
              return _this.server_socket.emit('save_data', _this.tsrecord.rawdump());
            };
          })(this));
          $('#newvid_ok').on('click', (function(_this) {
            return function(evt) {
              return _this.loadvideo(evt, $('#urlentry').val());
            };
          })(this));
          return $('#load_script').on('click', (function(_this) {
            return function(evt) {
              var txt;
              txt = $('saved_json').val();
              console.log(txt);
              return _this.tsrecord.load(txt);
            };
          })(this));
        };

        return TelestrationControls;

      })()
    };
  });

}).call(this);
