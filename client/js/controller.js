// Generated by CoffeeScript 1.8.0
(function() {
  var server_socket;

  server_socket = 'localhost:8123';

  require.config({
    paths: {
      _serverio: "http://" + server_socket + "/socket.io/socket.io.js"
    }
  });

  define(['tele_objects', 'paint_objects', 'js/Raphael.js', '_serverio'], function(tele_objects, paint_objects, raphael, io) {
    var BigController;
    return {
      BigController: BigController = (function() {
        function BigController(paint_id, video_id) {
          console.log('creating BigController');
          this.$paintframe = $('#' + paint_id);
          this.videodom = $('#' + video_id).get(0);
          this.paper = Raphael(paint_id, this.$paintframe.innerWidth(), this.$paintframe.innerHeight());
          this.socket = io.connect(server_socket);
          this.socket.removeAllListeners('load_reply');
          this.socket.on('load_reply', (function(_this) {
            return function(dbdata) {
              _this.load_script(dbdata.result);
              return console.log("Loaded session uuid: " + dbdata.result.uuid + " id: " + dbdata.result.id);
            };
          })(this));
        }

        BigController.prototype.start_recording = function() {
          console.log('start_recording');
          this.telescript = new tele_objects.TelestrationSessionRecord;
          this.paint_recorder = new paint_objects.PaintInputRecorder(this.paper, this.videodom, this.telescript);
          this.telestration_controls = new tele_objects.TelestrationSessionControls(this.telescript, this.videodom, this.socket);
          return this.telescript;
        };

        BigController.prototype.start_playing = function(telescript) {
          console.log('start_playing');
          this.paintsession = new paint_objects.PaintSession(this.paper, this.post_path_callback);
          return this.teleplayer = new tele_objects.TelestrationSessionPlayer(telescript, this.videodom, this.paintsession);
        };

        BigController.prototype.clear_all = function() {
          console.log('clear_all');
          if (this.paintsession != null) {
            this.paintsession.clear();
            this.paintsession = null;
          }
          if (this.videodom != null) {
            this.videodom.pause();
            this.videodom.src = '';
          }
          return this.telescript = null;
        };

        BigController.prototype.load_script = function(data) {
          var start_func;
          console.log('load_script');
          this.clear_all();
          this.telescript = new tele_objects.TelestrationSessionRecord;
          this.telescript.load_raw(data);
          start_func = (function(_this) {
            return function() {
              _this.start_playing(_this.telescript);
              return console.log('started script.');
            };
          })(this);
          return setTimeout(start_func, 500);
        };

        BigController.prototype.load_session = function(uuid) {
          console.log('load_session');
          return this.socket.emit('load_request', {
            uuid: uuid
          });
        };

        return BigController;

      })()
    };
  });

}).call(this);
