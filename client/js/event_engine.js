// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['tstamp', 'binary_search', 'binary_heap'], function(tstamp, binary_search, binary_heap) {
    var EventEngine;
    return {
      EventEngine: EventEngine = (function() {
        function EventEngine(timesource) {
          this.tick = __bind(this.tick, this);
          console.log("Creating eventengine");
          this.timesource = timesource != null ? timesource : tstamp;
          this.current_timestamp = this.timesource();
          this.last_timestamp = 0;
          this.initEventList();
        }

        EventEngine.prototype.initEventList = function() {
          return this.eventlist = new binary_search.OrderedArray(function(action) {
            return action != null ? action.timestamp : void 0;
          });
        };

        EventEngine.prototype.toString = function() {
          return "EventEngine with " + (this.eventlist.size()) + " queued actions";
        };

        EventEngine.prototype.queueWithEpoch = function(orig_due, orig_epoch, epoch, callback, cb_arg) {
          return this.queueAbsolute((orig_due - orig_epoch) + epoch, callback, cb_arg);
        };

        EventEngine.prototype.queueRelative = function(time, callback, callback_arg) {
          return this.queueAbsolute(time + this.current_timestamp, callback, callback_arg);
        };

        EventEngine.prototype.queueAbsolute = function(time, callback, callback_arg) {
          return this.eventlist.push({
            timestamp: time,
            callback: callback,
            callback_arg: callback_arg
          });
        };

        EventEngine.prototype.process_tick_item = function(item) {
          return item.callback(item.callback_arg);
        };

        EventEngine.prototype.tick = function(timestamp) {
          var next_tick_time, realnow;
          realnow = this.timesource();
          this.current_timestamp = timestamp != null ? timestamp : realnow;
          while (this.eventlist.firstkey() <= this.current_timestamp) {
            this.process_tick_item(this.eventlist.shift());
          }
          if (this.eventlist.firstkey() != null) {
            next_tick_time = this.eventlist.firstkey();
            return setTimeout(this.tick, next_tick_time);
          }
        };

        EventEngine.prototype.cancelAction = function(action) {
          return this.eventlist.remove(action);
        };

        return EventEngine;

      })()
    };
  });

}).call(this);
